# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ExportAttributesToExcel
                                 A QGIS plugin
 Exports the attribute values of pre-defined layers to a pre-defined excel file.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-14
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jonas Van Loocke
        email                : jonasvl_qgis@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .export_attributes_to_excel_dialog import ExportAttributesToExcelDialog
import os.path

#My own imports
import os
from PyQt5.QtCore import *
from qgis.core import *
from openpyxl import Workbook, load_workbook


class ExportAttributesToExcel:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ExportAttributesToExcel_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Export Attributes To Excel')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ExportAttributesToExcel', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/export_attributes_to_excel/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ExportAttributesToExcel'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Export Attributes To Excel'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
#        if self.first_start == True:
#            self.first_start = False
#            self.dlg = ExportAttributesToExcelDialog()

        # show the dialog
#        self.dlg.show()
        # Run the dialog event loop
#        result = self.dlg.exec_()
        # See if OK was pressed
        result = 1
        if result == 1:
            print("ok")
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            absolute_project_path = (QFileInfo(QgsProject.instance().fileName())).absolutePath()
            file_path = absolute_project_path + "/costs/MBB" + ".xlsx"
            print(file_path)
            
#input excel file
            mbb_template_path = os.path.dirname(os.path.realpath(__file__)) + "/templates" + "/MBB.xlsx"

            #Loading existing workbook
            wb = load_workbook(file_path)

            #Calling qgis layers
#Make distinction between triggers/project types
#            project_type = QgsExpressionContextUtils.projectScope().variable('project_type')
#Might not be necessary

            requested_layers = ['dtps', 'subd_micr', 'ducts', 'trenches', 'phases', 'manholes', 'zones', 'dtps_fttb', 'subd_micr_fttb', 'ducts_fttb', 'phases_fttb', 'manholes_fttb', 'zones_fttb', 'splices', 'street_cabinet', 'copper_cables']

            for lyr in QgsProject.instance().mapLayers().values():
                lyr_name = lyr.name()
                #print(lyr.name())
                if lyr_name in requested_layers:
                    wb.remove_sheet(wb.get_sheet_by_name(lyr_name))
                    ws = wb.create_sheet(lyr_name)
                    #ws = wb[lyr_name]
                    my_features = lyr.getFeatures()
            #            print(my_features)
            
            #        FIELDS
                    fields = lyr.fields()
                    attr_names = fields.names()
                    attr_names.insert(0, 'geometry')
                    print(attr_names)
                    ws.append(attr_names)
            
                    for f in my_features:
                        #Geometry column
                        geotr = f.geometry().asWkt()
                        #Attribute columns
                        attr = f.attributes()
                        attr2 = []
                        attr2.append(geotr)
                        for r in attr:
            #                print(r)
                            if r == NULL:
            #                    print("JA")
                                r = None
                            else:
            #                    print("NEE")
                                pass
                            attr2.append(r)
                        print(attr2)
                        ws.append(attr2)

            #Globale variabele herbestrating fetchen als die bestaat
            #print(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('herb'))

            #Saving
            wb.save(file_path)

            #Opening
            os.startfile(file_path)
            success = 1
            
        if success == 1:
            self.iface.messageBar().pushMessage("Success", "Excel export completed:" + file_path, level=Qgis.Success, duration=5)
        else:
            self.iface.messageBar().pushMessage("Error", "View message log", level=Qgis.Critical)
