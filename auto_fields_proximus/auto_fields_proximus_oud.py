# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoFieldsProximus
                                 A QGIS plugin
 This plugin updates fields automatically
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jonas Van Loocke
        email                : jonasvl_qgis@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .auto_fields_proximus_dialog import AutoFieldsProximusDialog
import os.path

##1__ AUTOFIELDS
import os
from PyQt5.QtCore import *
from qgis.core import *


class AutoFieldsProximus:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AutoFieldsProximus_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Auto Fields Proximus')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AutoFieldsProximus', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/auto_fields_proximus/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Updates fields automatically'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Auto Fields Proximus'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AutoFieldsProximusDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            requested_layers = ['dtps', 'subd_micr', 'ducts', 'phases']

            project = QgsProject.instance()

            #Global variables
            herbestrating = float(QgsExpressionContextUtils.projectScope(project).variable('herbestrating'))

            def calculate_fields_subd_micr():
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                code = lyr.dataProvider().fieldNameIndex('code')
                lengt_subd = lyr.dataProvider().fieldNameIndex('lengt_sub') #f[2]
                lengt_micr = lyr.dataProvider().fieldNameIndex('lengt_micr')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                dtps = lyr.dataProvider().fieldNameIndex('dtps')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                new_a = lyr.dataProvider().fieldNameIndex('new_a')
                print(id, code, lengt_subd, lengt_micr, cost_tot, dtps, phase_nr, new_a)

                for f in my_features:
                    # Lengte microcable: code like micr en overlengte dtps
                    if f[code] in ['MICRO']:
                        print("micro")
                        # Microcable check
                        f[lengt_micr] = round(f.geometry().length())  + (8 * f[dtps])
                        
                        # No subduct
                        f[2]
                        
                    elif f[code] in ['SUBD']:
                        print("subduct")
                        # No microcable
                        f[lengt_micr] = 0
                        
                        # Subduct check
                        f[2] = round(f.geometry().length())
                        
                    elif f[code] in ['SUBD_MICRO']:
                        print("Subduct_micro")
                        # Microcable check
                        f[lengt_micr] = round(f.geometry().length())  + (8 * f[dtps])
                        
                        # Subduct check
                        f[2] = round(f.geometry().length())
                        
                    else:
                        print("not found")
                        f[lengt_micr] = 0
                        f[2] = 0
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_ducts():
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                lengt_duct = lyr.dataProvider().fieldNameIndex('lengt_duct')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                diameter = lyr.dataProvider().fieldNameIndex('diameter')
                type = lyr.dataProvider().fieldNameIndex('type')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                ofp_nr = lyr.dataProvider().fieldNameIndex('ofp_nr')
                print(id, lengt_duct, cost_tot, diameter, type, phase_nr, ofp_nr)
                
                for f in my_features:
                    f[lengt_duct] = round(f.geometry().length())
                    lyr.updateFeature(f)

                    if f[type] == 'BUIS':
                        f[cost_tot] = round(f[lengt_duct] * (13.2 + 11.72 + 33 * herbestrating))
                    elif f[type] == 'DOUBLE':
                        f[cost_tot] = round(f[lengt_duct] * (13.2 + 2*11.72 + 33 * herbestrating))
                    elif f[type] == 'TRIPLE':
                        f[cost_tot] = round(f[lengt_duct] * (13.2 + 3*11.72 + 33 * herbestrating))
                    elif f[type] == 'BO':
                        f[cost_tot] = round((f[lengt_duct] * 97.9) - (f[lengt_duct] * (13.2 + 33 * herbestrating)) + 298 + (2*2.5*59.4))
                    elif f[type] == 'OV':
                        round(f[lengt_duct] * (33 * (1-herb)))
                    else:
                        round(f[lengt_duct] * (13.2 + 11.72 + 33 * herbestrating))

                    lyr.updateFeature(f)
                lyr.commitChanges()

            def calculate_fields_dtps():
                print("Dtps")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cluster = lyr.dataProvider().fieldNameIndex('cluster')
                dtp = lyr.dataProvider().fieldNameIndex('dtp')
                units_a = lyr.dataProvider().fieldNameIndex('units_a')
                units_b = lyr.dataProvider().fieldNameIndex('units_b')
                fiber = lyr.dataProvider().fieldNameIndex('fiber')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                comments = lyr.dataProvider().fieldNameIndex('comments')
                ofp = lyr.dataProvider().fieldNameIndex('ofp')

                print(id, cluster, dtp, units_a, units_b, fiber, cost_tot, phase_nr, comments, ofp)
                
                for f in my_features:
                    f[cost_tot] = round(303.8 + (f[fiber] * 23.8)) + 240

                    lyr.updateFeature(f)
                lyr.commitChanges()


            def calculate_fields_phases():
                print("StartPhases")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cost_ofp = lyr.dataProvider().fieldNameIndex('cost_ofp')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                total_cost = lyr.dataProvider().fieldNameIndex('total_cost')
                job_id = lyr.dataProvider().fieldNameIndex('job_id')
                path = lyr.dataProvider().fieldNameIndex('path')
                unit_cost = lyr.dataProvider().fieldNameIndex('unit_cost')
                ofp_amount = lyr.dataProvider().fieldNameIndex('ofp_amount')
                print(id, cost_ofp, phase_nr, total_cost, job_id, path, unit_cost, ofp_amount) #phase nr -1 wordt 2
                print("phases")
                
                for f in my_features:
                    f[cost_ofp] = f[ofp_amount] * (4902 + 421)
                    f[path] = 'https://intra.web.bc/JMS/ejms/bridge/app/job?ID=' + f[job_id]
                    
                    #Phases total_cost and unit_cost: TO DO
                    
                    lyr.updateFeature(f)
                lyr.commitChanges()

            def get_layer():
                if lyr.name() == 'dtps':
                    calculate_fields_dtps()

                elif lyr.name() == 'manholes':
                    calculate_fields_manholes()

                elif lyr.name() == 'subd_micr':
                    calculate_fields_subd_micr()
                    
                elif lyr.name() == 'ducts':
                    calculate_fields_ducts()

                elif lyr.name() == 'phases':
                    calculate_fields_phases()

                elif lyr.name() == 'zones':
                    calculate_fields_zones()

                else:
                    print("Do nothing")
                    pass

            for lyr in QgsProject.instance().mapLayers().values():
                if lyr.name() in requested_layers:
                    my_features = lyr.getFeatures()
                    print(lyr.name(), my_features)
                    get_layer()
                else:
                    pass