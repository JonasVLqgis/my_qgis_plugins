# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutoFieldsProximus
                                 A QGIS plugin
 This plugin updates fields automatically
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jonas Van Loocke
        email                : jonasvl_qgis@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .auto_fields_proximus_dialog import AutoFieldsProximusDialog
import os.path

##1__ AUTOFIELDS
import os
from PyQt5.QtCore import *
from qgis.core import *


class AutoFieldsProximus:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AutoFieldsProximus_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Auto Fields Proximus')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AutoFieldsProximus', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/auto_fields_proximus/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Updates fields automatically'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Auto Fields Proximus'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        result = 1
        if result == 1:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            requested_layers = ['dtps', 'subd_micr', 'ducts', 'phases', 'manholes', 'zones',
            'dtps_fttb', 'subd_micr_fttb', 'ducts_fttb', 'phases_fttb', 'manholes_fttb', 'zones_fttb',
            'copper_cables', 'street_cabinet', 'splices', 'trenches']

            project = QgsProject.instance()

#Global variables
            QgsExpressionContextUtils.setProjectVariable(project,'herbestrating','0')
            herbestrating = float(QgsExpressionContextUtils.projectScope(project).variable('herbestrating'))
            
#Template Version to not remove old functionality
            template_version = QgsExpressionContextUtils.projectScope(project).variable('version')
            if template_version == NULL:
                template_version = 'depreciated_version'

#            
#            QgsExpressionContextUtils.setProjectVariable(project,'myvar','Hello World!')
#            QgsExpressionContextUtils.projectScope(project).variable('myvar')
        
#uc = unitcost
            def calculate_fields_subd_micr():
                print("StartSubd_micro__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                code = lyr.dataProvider().fieldNameIndex('code')
                lengt_subd = lyr.dataProvider().fieldNameIndex('lengt_subd') #f[2]
                lengt_micr = lyr.dataProvider().fieldNameIndex('lengt_micr')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                dtps = lyr.dataProvider().fieldNameIndex('dtps')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                print(id, code, lengt_subd, lengt_micr, cost_tot, dtps, phase_nr)
                
                uc_subd = 3.08
                uc_micr = 3.11
                    
                for f in my_features:
                    #Variables
                    geolength = f.geometry().length()
                
                    f[id] = f.id() # feature id
                    # Lengte microcable: code like micr en overlengte dtps
                    if f[code] in ['MICRO']:
                        print("micro")
                        # Microcable check
                        f[lengt_micr] = round(geolength)  + (8 * f[dtps])
                        
                        # No subduct
                        f[lengt_subd] = 0
                        
                    elif f[code] in ['SUBD']:
                        print("subduct")
                        # No microcable
                        f[lengt_micr] = 0
                        
                        # Subduct check
                        f[lengt_subd] = round(geolength)
                        
                    elif f[code] in ['SUBD_MICRO']:
                        print("Subduct_micro")
                        # Microcable check
                        f[lengt_micr] = round(geolength)  + (8 * f[dtps])
                        
                        # Subduct check
                        f[lengt_subd] = round(geolength)
                        
                    else:
                        print("not found")
                        f[lengt_micr] = 0
                        f[lengt_subd] = 0
                    
                    f[cost_tot] = round(f[lengt_subd] * uc_subd + f[lengt_micr] * uc_micr)
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_ducts():
                print("StartDucts__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                lengt_duct = lyr.dataProvider().fieldNameIndex('lengt_duct')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                diameter = lyr.dataProvider().fieldNameIndex('diameter')
                type = lyr.dataProvider().fieldNameIndex('type')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                ofp_nr = lyr.dataProvider().fieldNameIndex('ofp_nr')
                print(id, lengt_duct, cost_tot, diameter, type, phase_nr, ofp_nr)
                
                uc_trench = 13.2
                uc_repav = 33
                uc_drill_pit = 298
                uc_drill = 97.90
                uc_area_repav = 59.40

                uc_duct = 11.72
                
                print(template_version)
                
                for f in my_features:
                    f[id] = f.id() # feature id
                    f[lengt_duct] = round(f.geometry().length())
                    lyr.updateFeature(f)

                    if template_version == 'depreciated_version':
                        if f[type].lower() == 'buis':
                            f[cost_tot] = round(f[lengt_duct] * (uc_trench + uc_duct + uc_repav * herbestrating))
                        elif f[type].lower() == 'double':
                            f[cost_tot] = round(f[lengt_duct] * (uc_trench + 2*uc_duct + uc_repav * herbestrating))
                        elif f[type].lower() == 'triple':
                            f[cost_tot] = round(f[lengt_duct] * (uc_trench + 3*uc_duct + uc_repav * herbestrating))
                        elif f[type].lower() == 'bo':
                            f[cost_tot] = round((f[lengt_duct] * uc_drill) - (f[lengt_duct] * (uc_trench + uc_repav * herbestrating)) + uc_drill_pit + (2*2.5* uc_area_repav))
                        elif f[type].lower() == 'ov':
                            f[cost_tot] = round(f[lengt_duct] * (uc_repav * (1-herbestrating)))
                        else:
                            f[cost_tot] = round(f[lengt_duct] * (uc_trench + uc_duct + uc_repav * herbestrating))


                    else:
                        if f[type].lower() == 'buis':
                            f[cost_tot] = round(f[lengt_duct] * (uc_duct))
                        elif f[type].lower() == 'intro':
                            f[cost_tot] == round(f[lengt_duct] * (uc_duct))

                    lyr.updateFeature(f)
                lyr.commitChanges()

            def calculate_fields_dtps():
                print("Startdtps__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cluster = lyr.dataProvider().fieldNameIndex('cluster')
                dtp = lyr.dataProvider().fieldNameIndex('dtp')
                units_a = lyr.dataProvider().fieldNameIndex('units_a')
                units_b = lyr.dataProvider().fieldNameIndex('units_b')
                fiber = lyr.dataProvider().fieldNameIndex('fiber')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                comments = lyr.dataProvider().fieldNameIndex('comments')
                ofp = lyr.dataProvider().fieldNameIndex('ofp')
                print(id, cluster, dtp, units_a, units_b, fiber, cost_tot, phase_nr, comments, ofp)
                
                uc_dtp = 303.8
                uc_fiber_joint = 23.8
                    
                for f in my_features:                  
                    f[id] = f.id() # feature id
                    f[cost_tot] = round(uc_dtp + (f[fiber] * uc_fiber_joint)) + 240

                    lyr.updateFeature(f)
                lyr.commitChanges()


            def calculate_fields_phases():
                print("StartPhases__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cost_ofp = lyr.dataProvider().fieldNameIndex('cost_ofp')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                total_cost = lyr.dataProvider().fieldNameIndex('total_cost')
                job_id = lyr.dataProvider().fieldNameIndex('job_id')
                path = lyr.dataProvider().fieldNameIndex('path')
                unit_cost = lyr.dataProvider().fieldNameIndex('unit_cost')
                ofp_amount = lyr.dataProvider().fieldNameIndex('ofp_amount')
                print(id, cost_ofp, phase_nr, total_cost, job_id, path, unit_cost, ofp_amount) #phase nr -1 wordt 2
                print("phases")

                #Must be deleted soon! (Calculation moved to manholes)
                uc_ofp = 4902
                uc_ov_joint = 421

                for f in my_features:                   
                    f[id] = f.id() # feature id
#                    lyr.updateFeature(f)
                    if f[ofp_amount] == NULL:
                        f[cost_ofp] = 0
                    else:
                        f[cost_ofp] = f[ofp_amount] * (uc_ofp + uc_ov_joint)
    
                    if f[job_id] == NULL:
                        pass
                    else:
                        f[path] = 'https://intra.web.bc/JMS/ejms/bridge/app/job?ID=' + f[job_id]
                        
                    if f[phase_nr] == NULL or f[phase_nr] < 0:
                        f[phase_nr] = f[id] + 1
                    else:
                        pass
                    
                    #Phases total_cost and unit_cost: TO DO
                    
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_zones():
                print("StartZones__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cost_ofp = lyr.dataProvider().fieldNameIndex('cost_ofp')
                zone_nr = lyr.dataProvider().fieldNameIndex('zone_nr')
                total_cost = lyr.dataProvider().fieldNameIndex('total_cost')
                job_id = lyr.dataProvider().fieldNameIndex('job_id')
                path = lyr.dataProvider().fieldNameIndex('path')
                unit_cost = lyr.dataProvider().fieldNameIndex('unit_cost')
                ofp_amount = lyr.dataProvider().fieldNameIndex('ofp_amount')
                print(id, cost_ofp, zone_nr, total_cost, job_id, path, unit_cost, ofp_amount)
                print("zones")
                
                #Must be deleted soon! (Calculation moved to manholes)
                uc_ofp = 4902
                uc_ov_joint = 421
                
                for f in my_features:
                    f[id] = f.id() # feature id
                    f[cost_ofp] = f[ofp_amount] * (uc_ofp + uc_ov_joint)
                    if f[job_id] == NULL:
                        pass
                    else:
                        f[path] = 'https://intra.web.bc/JMS/ejms/bridge/app/job?ID=' + f[job_id]
                    
                    #Phases total_cost and unit_cost: TO DO

                    if f[zone_nr] == NULL or f[zone_nr] < 0:
                        f[zone_nr] = f[id] + 1
                    else:
                        pass
                    
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_manholes():
                print("Manholes__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cost = lyr.dataProvider().fieldNameIndex('cost')
                subtype = lyr.dataProvider().fieldNameIndex('subtype')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                angle = lyr.dataProvider().fieldNameIndex('angle')
                ofp = lyr.dataProvider().fieldNameIndex('ofp')
                print(id, cost, subtype, phase_nr, angle, ofp)
                
                for f in my_features:
                    
                    uc_manhole = 2196
                    uc_ofp = 4902
                    uc_ov_joint = 421
                    
                    f[id] = f.id() # feature id
                    if f[ofp] != NULL:
                        num_ofp = int(f[ofp])
                    else:
                        num_ofp = 0
                    
                    if f[subtype] in ['T Branch', 'End Cap', 'Link', 'CR', 'Cable Room', 'Virtual Manhole', 'Left-right coupling', 'OFP bestaande bak']:
                        f[cost] = 0
                    else:
                        f[cost] = uc_manhole
#If there is an amount of ofp's, update cost
                    if num_ofp == NULL or num_ofp <= 0:
                        pass
                    else:
                        f[cost] = f[cost] + num_ofp * uc_ofp
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_copper_cables():
                print("Start_Copper_cables__")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cable_code = lyr.dataProvider().fieldNameIndex('cable_code')
                length = lyr.dataProvider().fieldNameIndex('length')
                subnet = lyr.dataProvider().fieldNameIndex('subnet')
                dbb = lyr.dataProvider().fieldNameIndex('dbb')
                cost = lyr.dataProvider().fieldNameIndex('cost')
                workorder = lyr.dataProvider().fieldNameIndex('workorder')
                print(id, cable_code, length, subnet, dbb, cost, workorder)
                
                uc_copper_cable = 9.52
                
                for f in my_features:
                    f[id] = f.id() # feature id
                    f[length] = round(f.geometry().length())
                    lyr.updateFeature(f)
                    
                    # Te leggen koperkabels
                    if workorder == 'Te leggen':
                        f[cost] = round(f[length] * uc_copper_cable)
                        
                    #Anders: te verwijderen koperkabels (nog te veranderen) []
                    else:
                        f[cost] = round(f[length] * uc_copper_cable)
                    
                    lyr.updateFeature(f)
                    
                lyr.commitChanges()
                
            def calculate_fields_street_cabinet():
                print("Street_cabinet")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                name = lyr.dataProvider().fieldNameIndex('name')
                type = lyr.dataProvider().fieldNameIndex('type')
                workorder = lyr.dataProvider().fieldNameIndex('workorder')
                cost = lyr.dataProvider().fieldNameIndex('cost')
                print(id, name, type, workorder, cost)
                
                for f in my_features:
                    f[id] = f.id() # feature id
                    lyr.updateFeature(f)
                    
#                    # Te leggen koperkabels
#                    if workorder == 'te plaatsen':
#                        #kost moet hier komen
#                        f[cost] = f[cost]
#                        
#                    #Anders: te verwijderen koperkabels (nog te veranderen) []
#                    else:
#                        f[cost] = f[cost]
                    
                    lyr.updateFeature(f)
                    
                lyr.commitChanges()
                
            def calculate_fields_splices():
                print("Splices")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                splice_typ = lyr.dataProvider().fieldNameIndex('splice_typ')
                las_A = lyr.dataProvider().fieldNameIndex('las_A')
                las_B = lyr.dataProvider().fieldNameIndex('las_B')
                subnet_nr = lyr.dataProvider().fieldNameIndex('subnet_nr')
                descr = lyr.dataProvider().fieldNameIndex('descr')
                dbb = lyr.dataProvider().fieldNameIndex('dbb')
                Cost = lyr.dataProvider().fieldNameIndex('Cost')
                print(id, splice_typ, las_A, las_B, subnet_nr, descr, dbb, Cost)
                
                uc_lasput = 153
                uc_pairs = 2.03 # of 1.73?
                
# Cost = Aantal te lassen paren + lasput

                #cost = (las_A + las_B)//2 * uc_pairs + uc_lasput
                
            def calculate_fields_trenches():
                print("Trenches")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                trench_len = lyr.dataProvider().fieldNameIndex('trench_len')
                type = lyr.dataProvider().fieldNameIndex('type')
                phase_nr = lyr.dataProvider().fieldNameIndex('phase_nr')
                cost_tot = lyr.dataProvider().fieldNameIndex('cost_tot')
                repav_leng = lyr.dataProvider().fieldNameIndex('repav_leng')
                
                print(id, trench_len, type, phase_nr, cost_tot, repav_leng)
                
                uc_trench = 13.2
#                uc_duct = 11.72
                uc_repavement = 33
                uc_drill_pit = 298
                uc_drill = 97.90
                uc_area_repav = 59.40
                
                for f in my_features:
                    f[id] = f.id() # feature id
                    f[trench_len] = round(f.geometry().length())
                    lyr.updateFeature(f)
                    
                    repavement_cost = uc_repavement * f[repav_leng]
                    
                    if f[type] == 'enkel sleuf':
                        f[cost_tot] = round(f[trench_len] * uc_trench + repavement_cost)
                    elif f[type] == 'boring':
#                        repavement_cost = 0
#drilling cost: drilling length cost and 2 pits of 2.5 * unitaire cost area
                        f[cost_tot] = round(f[trench_len] * uc_drill + uc_drill_pit + (2 * 2.5 * uc_area_repav))
                       
                       #formule? + drilling_cost
                    elif f[type] == 'oversteek':
                        repavement_cost = uc_repavement * trench_len
                        f[cost_tot] = round(f[trench_len] * uc_trench + repavement_cost)
                    else:
                        pass
                    print(f[cost_tot])
                    lyr.updateFeature(f)
                lyr.commitChanges()
                
            def calculate_fields_copper_cables():
                print("Copper_cables")
                lyr.startEditing()
                id = lyr.dataProvider().fieldNameIndex('id')
                cable_code = lyr.dataProvider().fieldNameIndex('cable_code')
                length = lyr.dataProvider().fieldNameIndex('length')
                cost = lyr.dataProvider().fieldNameIndex('cost')
                workorder = lyr.dataProvider().fieldNameIndex('workorder')

                for f in my_features:
                    cable_codes_uc = {8322006: 15.7}
                    
                    f[length] = f.geometry().length()
                    print(f[length])
            #        cable_code_key = f[cable_code]
            #        print(cable_code_key)
                    
                    if f[workorder].lower() == 'te leggen':
            #            print(cable_code_key)
                        print(cable_codes_uc.get(f[cable_code]))
                        f[cost] = cable_codes_uc.get(f[cable_code]) * f[length]
                        print(f[cost])
                        
                    lyr.updateFeature(f)
                lyr.commitChanges()

#            def get_layer():
#                layer_name = lyr.name()
#                
#                if layer_name == 'dtps' or layer_name == 'dtps_fttb':
#                    calculate_fields_dtps()
#
#                elif layer_name == 'manholes' or layer_name == 'manholes_fttb':
#                    calculate_fields_manholes()
#
#                elif layer_name == 'subd_micr' or layer_name == 'subd_micr_fttb':
#                    calculate_fields_subd_micr()
#                    
#                elif layer_name == 'ducts' or layer_name == 'ducts_fttb':
#                    calculate_fields_ducts()
#
#                elif layer_name == 'phases' or layer_name == 'phases_fttb':
#                    calculate_fields_phases()
#
#                elif layer_name == 'zones' or layer_name == 'zones_fttb':
#                    calculate_fields_zones()
#                    
#                elif layer_name == 'copper_cables':
#                    calculate_fields_copper_cables()
#                
#                elif layer_name == 'street_cabinet':
#                    calculate_fields_street_cabinet()
#                
#                elif layer_name == 'splices':
#                    calculate_fields_splices()
#                    
#                elif layer_name == 'trenches':
#                    print('******************************')
#                    calculate_fields_trenches()
#
#                else:
#                    print("Do nothing")
#                    pass

            for lyr in QgsProject.instance().mapLayers().values():
                if lyr.name() in requested_layers:
                    #Save before starting the process
                    lyr.commitChanges()
                    my_features = lyr.getFeatures()
#                    print(lyr.name(), my_features)
#                    get_layer()

#To catch if requested layers don't have functions
                    try:
                        calculateFields = 'calculate_fields_' + lyr.name()
                        locals()[calculateFields]()
                    except:
                        pass
                else:
                    pass
                success = 1

            if success == 1:
                self.iface.messageBar().pushMessage("Success", "Fields updated succesfully", level=Qgis.Success, duration=5)
            else:
                self.iface.messageBar().pushMessage("Error", "Make sure to fill in all required fields", level=Qgis.Critical)